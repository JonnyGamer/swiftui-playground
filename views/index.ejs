<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <link rel="apple-touch-icon" sizes="57x57" href="images/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="images/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="images/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="images/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="images/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="images/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="images/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="images/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="images/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="images/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="images/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="images/favicon-16x16.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="images/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">

    <style type="text/css">
      .ace_editor {
        height: 600px;
        padding: 0;
        margin: 0;
      }
      .no-gutters {
        margin-right: 0;
        margin-left: 0;

        > .col,
        > [class*="col-"] {
          padding-right: 0;
          padding-left: 0;
        }
      }
      .results-area {
        height: 600px;
        padding: 0;
        margin: 0;
        background-color: #E1E3E6;
        overflow: scroll;
      }
      /* Sticky footer styles */
      html {
        position: relative;
        min-height: 100%;
      }
      body {
        margin-bottom: 60px; /* Margin bottom by footer height */
      }
      .footer {
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 60px; /* Set the fixed height of the footer here */
        line-height: 60px; /* Vertically center the text there */
        background-color: #F7F7F7;
      }
    </style>
    <script src="https://use.fontawesome.com/ab7ee5aca9.js"></script>

    <title><%= title %></title>
  </head>
  <body style="background-color: #F7F7F7; color: #333333;">
    <div class="container" style="margin-top: 30px;">
      <div class="row">
        <div class="col" style="margin-bottom: 15px;">
          <h4><%= title %></h4>
        </div>
        <div class="col-md-2">
          <form>
            <div class="form-group">
              <select class="form-control" id="platformSelect">
                <option value="iOS" selected>iOS</option>
              </select>
            </div>
          </form>
        </div>
      </div>
    </div>
    <div class="container-fluid" style="padding-right: 0; padding-left: 0; padding-bottom: 15px;">
      <div class="row no-gutters">
        <div class="col-md-6">
          <pre id="editor"><xmp>import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Text("Hello SwiftUI Playground!")
                .font(.largeTitle)
                .foregroundColor(.blue)
                .padding()
            Button(action: {}) {
                HStack {
                    Image(systemName: "suit.heart.fill")
                        .foregroundColor(.red)
                    Text("Let's Get Started!")
                        .font(.headline)
                        .foregroundColor(.white)
                }
                .padding(12)
                .background(Color.orange)
                .cornerRadius(8)
            }
        }
    }
}

struct ContentView_Preview: PreviewProvider {
    static var previews: some View {
        ContentView()
            .previewLayout(.fixed(width: 375, height: 400))
    }
}</xmp>
</pre>
        </div>
        <div class="col-md-6 results-area">
          <div class="col-md-12" id="results-area">
            <pre id="results-output"></pre>
            <div id="results-previews"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row">
        <div class="col-md-3 mx-auto" style="margin-top: 15px; margin-bottom: 30px;">
          <button id="run-button" type="button" class="btn btn-primary btn-block btn-lg">Run&nbsp;&nbsp;<i class="fa fa-play" aria-hidden="true"></i></button>
        </div>
      </div>
    </div>
    <footer class="footer">
      <div class="container">
        <div class="row">
          <div class="mx-auto">
            <a href="https://github.com/kishikawakatsumi/swiftui-playground" style="color: #999999;"><i class="fa fa-github fa-2x"></i></a>
          </div>
        </div>
      </div>
    </footer>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

    <script src="ace/ace.js"></script>
    <script src="ace/ext-language_tools.js"></script>
    <script type="text/javascript">
      ace.require("ace/ext/language_tools");
      const editor = ace.edit("editor");
      editor.setTheme("ace/theme/xcode");
      editor.session.setMode("ace/mode/swift");
      editor.$blockScrolling = Infinity
      editor.setOptions({
        useSoftTabs: true,
        autoScrollEditorIntoView: true,
        fontFamily: "menlo",
        fontSize: "11pt",
        showInvisibles: false,
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: true,
      });
      editor.renderer.setOptions({
        showFoldWidgets: false,
        showPrintMargin: false,
      });
      const row = editor.session.getLength() - 1
      const column = editor.session.getLine(row).length
      editor.gotoLine(row + 1, column)

      const resultsArea = $('#results-area')
      const resultsOutput = $('#results-output')
      const resultsPreviews = $('#results-previews')

      $("#run-button").click(function (e) {
        e.preventDefault();
        run($(this), editor);
      });

      function run(sender, editor) {
        const buttonTitle = deactivate(sender);
        const intid = showProgress(resultsArea);
        const code = editor.getSession().getValue();
        const json = {
          code: code
        };
        $.post('/run', json, function(data, error, xhr) {
          resultsOutput.text(data.errors);

          for (const preview of data.previews) {
            const div = $("<div>");
            const img = $('<img>', { src: preview.link, width: preview.width * 0.5, height: preview.height * 0.5 })
                          .css({display: 'block', margin: '0 auto 10px auto', border: '5px #CFD1D3 solid'});
            img.appendTo(div);
            resultsPreviews
              .append(div)
          }
          clearInterval(intid);
          editor.focus();
          activate(sender, buttonTitle);
        });
      }

      function activate(button, buttonTitle) {
        button.prop('disabled', false);
        button.html(buttonTitle);
      }

      function deactivate(button) {
        button.prop('disabled', true);
        var buttonTitle = button.html();
        button.html('<i class="fa fa-circle-o-notch fa-spin" aria-hidden="true"></i> Processing...');
        resultsOutput.text('');
        resultsPreviews.empty();
        return buttonTitle
      }

      function showProgress(editor) {
        let counter = 0
        return setInterval(function() {
          if (counter == 0) {
            resultsOutput.text('Executing...');
            resultsPreviews.empty();
            counter += 1;
          } else {
            resultsOutput.text(resultsOutput.text() + '.');
          }
        }, 1500);
      }
    </script>
  </body>
</html>
